{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"5. Autoencoder","provenance":[{"file_id":"https://github.com/rickwierenga/notebooks/blob/master/autoencoders.ipynb","timestamp":1613135553098}],"collapsed_sections":["dORA82ERqFJm"]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"}},"cells":[{"cell_type":"code","metadata":{"id":"dGegnYJh5xiD"},"source":["import keras\n","from keras import layers\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4buT4eES53MB"},"source":["encoding_dim = 32 "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4U_uSbnL5zMN"},"source":["# This is our input image\n","input_img = keras.Input(shape=(784,))\n","# \"encoded\" is the encoded representation of the input\n","encoded = layers.Dense(encoding_dim, activation='relu')(input_img)\n","# \"decoded\" is the lossy reconstruction of the input\n","decoded = layers.Dense(784, activation='sigmoid')(encoded)\n","\n","# This model maps an input to its reconstruction\n","autoencoder = keras.Model(input_img, decoded)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6_UmnwzR54Nx"},"source":["encoder = keras.Model(input_img, encoded)\n","encoded_input = keras.Input(shape=(encoding_dim,))\n","# Retrieve the last layer of the autoencoder model\n","decoder_layer = autoencoder.layers[-1]\n","# Create the decoder model\n","decoder = keras.Model(encoded_input, decoder_layer(encoded_input))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t9-vo6WB57_t"},"source":["autoencoder.compile(optimizer='adam', loss='binary_crossentropy')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MyXdfiiL5-OF"},"source":["from keras.datasets import mnist\n","import numpy as np\n","(x_train, _), (x_test, _) = mnist.load_data()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mOPOEFyd5_vD","executionInfo":{"status":"ok","timestamp":1624636916292,"user_tz":300,"elapsed":177,"user":{"displayName":"Carlos Andres Delgado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjP3vz6z1kbL9h1Cu8lZDyH46NiLdCVH_P2OICMUg=s64","userId":"13959138069706279485"}},"outputId":"1bd62ca9-7638-40a9-b822-d2560a9145ab"},"source":["x_train = x_train.astype('float32') / 255.\n","x_test = x_test.astype('float32') / 255.\n","x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))\n","x_test = x_test.reshape((len(x_test), np.prod(x_test.shape[1:])))\n","print(x_train.shape)\n","print(x_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(60000, 784)\n","(10000, 784)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dxSyWv0z6AXG","executionInfo":{"status":"ok","timestamp":1624637021918,"user_tz":300,"elapsed":99182,"user":{"displayName":"Carlos Andres Delgado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjP3vz6z1kbL9h1Cu8lZDyH46NiLdCVH_P2OICMUg=s64","userId":"13959138069706279485"}},"outputId":"35b3a1a8-709e-41da-dc48-297130cd844d"},"source":["autoencoder.fit(x_train, x_train,\n","                epochs=50,\n","                batch_size=256,\n","                shuffle=True,\n","                validation_data=(x_test, x_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","235/235 [==============================] - 12s 6ms/step - loss: 0.3877 - val_loss: 0.1897\n","Epoch 2/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1801 - val_loss: 0.1533\n","Epoch 3/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1492 - val_loss: 0.1342\n","Epoch 4/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1322 - val_loss: 0.1224\n","Epoch 5/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1212 - val_loss: 0.1139\n","Epoch 6/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1132 - val_loss: 0.1076\n","Epoch 7/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1075 - val_loss: 0.1033\n","Epoch 8/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1033 - val_loss: 0.0998\n","Epoch 9/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.1002 - val_loss: 0.0975\n","Epoch 10/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0983 - val_loss: 0.0956\n","Epoch 11/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0967 - val_loss: 0.0945\n","Epoch 12/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0955 - val_loss: 0.0938\n","Epoch 13/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0949 - val_loss: 0.0934\n","Epoch 14/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0947 - val_loss: 0.0930\n","Epoch 15/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0942 - val_loss: 0.0927\n","Epoch 16/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0940 - val_loss: 0.0926\n","Epoch 17/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0936 - val_loss: 0.0925\n","Epoch 18/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0937 - val_loss: 0.0924\n","Epoch 19/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0936 - val_loss: 0.0924\n","Epoch 20/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0935 - val_loss: 0.0922\n","Epoch 21/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0935 - val_loss: 0.0921\n","Epoch 22/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0933 - val_loss: 0.0920\n","Epoch 23/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0934 - val_loss: 0.0920\n","Epoch 24/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0933 - val_loss: 0.0920\n","Epoch 25/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0931 - val_loss: 0.0919\n","Epoch 26/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0929 - val_loss: 0.0919\n","Epoch 27/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0932 - val_loss: 0.0918\n","Epoch 28/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0934 - val_loss: 0.0918\n","Epoch 29/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0933 - val_loss: 0.0918\n","Epoch 30/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0931 - val_loss: 0.0918\n","Epoch 31/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0932 - val_loss: 0.0918\n","Epoch 32/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0929 - val_loss: 0.0917\n","Epoch 33/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0930 - val_loss: 0.0918\n","Epoch 34/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0928 - val_loss: 0.0917\n","Epoch 35/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0929 - val_loss: 0.0918\n","Epoch 36/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0928 - val_loss: 0.0917\n","Epoch 37/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0929 - val_loss: 0.0917\n","Epoch 38/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0927 - val_loss: 0.0917\n","Epoch 39/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0926 - val_loss: 0.0917\n","Epoch 40/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0926 - val_loss: 0.0917\n","Epoch 41/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0926 - val_loss: 0.0916\n","Epoch 42/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0927 - val_loss: 0.0917\n","Epoch 43/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0926 - val_loss: 0.0916\n","Epoch 44/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0927 - val_loss: 0.0915\n","Epoch 45/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0927 - val_loss: 0.0916\n","Epoch 46/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0928 - val_loss: 0.0915\n","Epoch 47/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0927 - val_loss: 0.0916\n","Epoch 48/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0926 - val_loss: 0.0915\n","Epoch 49/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0929 - val_loss: 0.0915\n","Epoch 50/50\n","235/235 [==============================] - 1s 4ms/step - loss: 0.0925 - val_loss: 0.0915\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f868d03db50>"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"eaxObqjZ6KgE"},"source":["encoded_imgs = encoder.predict(x_test)\n","decoded_imgs = decoder.predict(encoded_imgs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"JS65RPIb6SVu","executionInfo":{"status":"ok","timestamp":1624637024316,"user_tz":300,"elapsed":631,"user":{"displayName":"Carlos Andres Delgado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjP3vz6z1kbL9h1Cu8lZDyH46NiLdCVH_P2OICMUg=s64","userId":"13959138069706279485"}},"outputId":"dfd82597-11a7-4419-9d25-22fa9e251637"},"source":["# Use Matplotlib (don't ask)\n","import matplotlib.pyplot as plt\n","\n","n = 10  # How many digits we will display\n","plt.figure(figsize=(20, 4))\n","for i in range(n):\n","    # Display original\n","    ax = plt.subplot(2, n, i + 1)\n","    plt.imshow(x_test[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","\n","    # Display reconstruction\n","    ax = plt.subplot(2, n, i + 1 + n)\n","    plt.imshow(decoded_imgs[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x288 with 20 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}